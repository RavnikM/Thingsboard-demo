{
  "entityType" : "CONVERTER",
  "entity" : {
    "additionalInfo" : {
      "description" : ""
    },
    "configuration" : {
      "scriptLang" : "JS",
      "decoder" : "// Decode an uplink message from a buffer\n// payload - array of bytes\n// metadata - key/value object\n\n/** Decoder **/\n\n// decode payload to string\nvar payloadStr = decodeToString(payload);\n\n// decode payload to JSON\nvar data = decodeToJson(payload);\n\nvar deviceName = 'Android Telefon 1';\nvar deviceType = 'Android';\n//var customerName = 'Customer C';\nvar groupName = 'Android Telefon';\n// use assetName and assetType instead of deviceName and deviceType\n// to automatically create assets instead of devices.\n// var assetName = 'Asset A';\n// var assetType = 'building';\nvar prepared_telemerty = prepare_telemerty(payload)\n\n// Result object with device/asset attributes/telemetry data\nvar result = {\n    // Use deviceName and deviceType or assetName and assetType, but not both.\n    deviceName: deviceName,\n    deviceType: deviceType,\n    // assetName: assetName,\n    // assetType: assetType,\n    // customerName: customerName,\n    groupName: groupName,\n    attributes: {\n        model: 'Model A',\n        serialNumber: 'SN111',\n        integrationName: metadata['integrationName']\n    },\n\n    telemetry: prepared_telemerty\n};\n\n/** Helper functions **/\nfunction prepare_telemerty(payload) {\n    var data = decodeToJson(payload);\n    var telemety = {\n        a: data.payload[0].name\n    };\n\n    for (var pl in data.payload) {\n        if (data.payload[pl].name == \"accelerometer\") {\n            telemety = {\n                x: data.payload[pl].values.x,\n                y: data.payload[pl].values.y,\n                z: data.payload[pl].values.z\n            }\n        } else if (data.payload[pl].name ==\n            \"accelerometer\") {\n            telemety = {\n                longitude: data.payload[pl].values\n                    .longitude,\n                latitude: data.payload[pl].values\n                    .latitude,\n                altitude: data.payload[pl].values\n                    .altitude,\n                bearing: data.payload[pl].values\n                    .bearing,\n                speed: data.payload[pl].values.speed\n            }\n        }\n\n    }\n\n    return telemety;\n}\n\nfunction decodeToString(payload) {\n    return String.fromCharCode.apply(String, payload);\n}\n\nfunction decodeToJson(payload) {\n    // covert payload to string.\n    var str = decodeToString(payload);\n\n    // parse string to JSON\n    var data = JSON.parse(str);\n    return data;\n}\n\nreturn result;",
      "tbelDecoder" : "// Decode an uplink message from a buffer\n// payload - array of bytes\n// metadata - key/value object\n\n/** Decoder **/\n\n// decode payload to string\nvar payloadStr = decodeToString(payload);\n\n// decode payload to JSON\n// var data = decodeToJson(payload);\n\nvar deviceName = 'Device A';\nvar deviceType = 'thermostat';\nvar customerName = 'Customer C';\nvar groupName = 'thermostat devices';\n// use assetName and assetType instead of deviceName and deviceType\n// to automatically create assets instead of devices.\n// var assetName = 'Asset A';\n// var assetType = 'building';\n\n// Result object with device/asset attributes/telemetry data\nvar result = {\n// Use deviceName and deviceType or assetName and assetType, but not both.\n   deviceName: deviceName,\n   deviceType: deviceType,\n// assetName: assetName,\n// assetType: assetType,\n// customerName: customerName,\n   groupName: groupName,\n   attributes: {\n       model: 'Model A',\n       serialNumber: 'SN111',\n       integrationName: metadata['integrationName']\n   },\n   telemetry: {\n       temperature: 42,\n       humidity: 80,\n       rawData: payloadStr\n   }\n};\n\n/** Helper functions 'decodeToString' and 'decodeToJson' are already built-in **/\n\nreturn result;",
      "encoder" : null,
      "tbelEncoder" : null
    },
    "debugMode" : true,
    "edgeTemplate" : false,
    "externalId" : null,
    "id" : {
      "entityType" : "CONVERTER",
      "id" : "7ee14d20-3f67-11ee-9b11-37540c770a8a"
    },
    "name" : "Android Sensors-Converter",
    "type" : "UPLINK"
  },
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}